import numpy as np
from include.FittingRoutine import t_dist, t_dist_jac, t_dist_hess

def f(x,a1,mu1,sigma1,nu1,b1,a2,mu2,sigma2,nu2,b2):
	return t_dist(x,a1,mu1,sigma1,nu1,b1)+\
		t_dist(x,a2,mu2,sigma2,nu2,b2)
def jac(x,a1,mu1,sigma1,nu1,b1,a2,mu2,sigma2,nu2,b2):
	if isinstance(x,np.ndarray):
		jac = np.array([np.append(t_dist_jac(x[0],a1,mu1,sigma1,nu1,b1),
		t_dist_jac(x[0],a2,mu2,sigma2,nu2,b2))])
		for i in range(1,len(x)):
			jac = np.append(jac,[np.append(t_dist_jac(x[i],a1,mu1,sigma1,nu1,b1),
		t_dist_jac(x[i],a2,mu2,sigma2,nu2,b2))],axis=0)
		return jac.T
	else:
		return np.append(t_dist_jac(x,a1,mu1,sigma1,nu1,b1),
			t_dist_jac(x,a2,mu2,sigma2,nu2,b2))
def hess(x,a1,mu1,sigma1,nu1,b1,a2,mu2,sigma2,nu2,b2):
	hess_1 = t_dist_hess(x,a1,mu1,sigma1,nu1,b1)
	hess_2 = t_dist_hess(x,a2,mu2,sigma2,nu2,b2)
	sh = hess_1.shape
	if len(sh) == 3:
		hess = np.zeros((2*sh[0],2*sh[1],sh[2]))
		hess[:sh[0],:sh[0],:] = hess_1
		hess[sh[0]:2*sh[0],sh[0]:2*sh[0],:] = hess_2
	else:
		hess = np.zeros((2*sh[0],2*sh[1]))
		hess[:sh[0],:sh[0]] = hess_1
		hess[sh[0]:2*sh[0],sh[0]:2*sh[0]] = hess_2
	return hess
